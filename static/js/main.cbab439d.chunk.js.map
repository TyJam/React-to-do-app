{"version":3,"sources":["TodoBanner.js","TodoCreator.js","TodoRow.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","render","className","props","name","tasks","filter","t","done","length","Component","TodoCreator","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","callback","state","onChange","onClick","TodoRow","item","action","type","checked","VisibilityControl","isChecked","e","description","App","task","todoItems","find","toggleTodo","todo","map","todoTableRows","doneValue","key","userName","class","showCompleted","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbab439d.chunk.js","sourcesContent":["import React, {Component } from 'react';\r\n\r\nexport class TodoBanner extends Component{\r\n\r\n    render = () =>\r\n      <h4 className=\"bg-primary text-white text-center p-2\">\r\n           {this.props.name}'s To Do List \r\n           ({this.props.tasks.filter(t => !t.done).length} items to do )\r\n      </h4>\r\n}","import React, { Component } from 'react';\r\n\r\nexport class TodoCreator extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {newItemText: \"\"}\r\n    }\r\n\r\n    updateNewTextValue = (event) =>{\r\n        this.setState({newItemText: event.target.value});\r\n    }\r\n\r\n    createNewTodo= () => {\r\n        this.props.callback(this.state.newItemText);\r\n        this.setState({newItemText: \"\"})\r\n    }\r\n\r\n    render = () => \r\n        <div className=\"my-1\">\r\n            <input className=\"form-control\" value={this.state.newItemText}\r\n               onChange={this.updateNewTextValue}/>\r\n               <button className=\"btn btn-primary mt-1\" \r\n                       onClick={this.createNewTodo}>Add</button>\r\n        </div>\r\n}\r\n\r\n","import React, {Component } from 'react';\r\nexport class TodoRow extends Component{\r\n\r\n    render =() => \r\n      <tr>\r\n          <td>{this.props.item.action}</td>\r\n          <td>\r\n              <input type=\"checkbox\" checked={this.props.item.done} onChange={() => this.props.callback(this.props.item) }/>\r\n          </td>\r\n      </tr>\r\n}","import React, {Component } from 'react';\n\nexport class VisibilityControl extends Component{\n\n    render =() =>\n      <div className=\"form-check\">\n          <input className=\"form-check-input\" type=\"checkbox\"\n                checked={this.props.isChecked}\n                onChange={(e) => this.props.callback(e.target.checked)} />\n          <lable className=\"form-check-label\">\n              Show{this.props.description}\n          </lable>\n      </div>\n}","import React, { Component } from 'react';\nimport {TodoBanner} from \"./TodoBanner\";\nimport {TodoCreator} from \"./TodoCreator\";\nimport {TodoRow} from \"./TodoRow\";\nimport { VisibilityControl } from \"./VisibilityControl\";\n\n\nexport default class App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      userName: \"My\",\n      todoItems: [{action:\" Develop a new feature for the web application\",done:false},\n                  {action:\" Have lunch With Maria on Wendnesday\", done:false},\n                  {action:\"Schedule 3 Social media Postas\", done:true},\n                  {action:\"Connect With 3 New Pople \", done:false},\n                  {action:\"edit articles and review for SEO value\", done:false}],\n      //newItemText: \"\" \n      showCompleted:true\n      \n    }\n  }\n\n  updateNewTextValue = (event) => {\n      this.setState({ newItemText: event.target.value });\n    }\n    createNewTodo = (task) => {\n        if (!this.state.todoItems\n            .find(item => item.action === this.state.task)) {\n        this.setState({\n            todoItems: [...this.state.todoItems,\n            { action: task, done: false }],\n         //newItemText: \"\"\n        });\n      }\n    }\n     toggleTodo = (todo) => this.setState({todoItems:\n          this.state.todoItems.map(item => item.action === todo.action\n            ?{...item, done:!item.done} : item)});\n\n     todoTableRows = (doneValue) => this.state.todoItems\n     .filter(item=> item.done === doneValue).map(item => \n         <TodoRow key={item.action} item={item} callback={this.toggleTodo}/>)\n\n    render = () =>\n       <div>\n           <TodoBanner name={this.state.userName} tasks={this.state.todoItems}/>\n         <div className=\"container-fluid\">\n            <TodoCreator callback={this.createNewTodo}/>\n            <table className=\"table table-striped table-bordered\">\n                 <thead>\n                 <tbody>{this.todoTableRows(false)}</tbody>\n                     <tr>\n                         <th>\n                            Description\n                         </th>\n                         <th>\n                           Done\n                         </th>\n                     </tr>\n                 </thead>\n                 <tbody>{this.todoTableRows()}</tbody>\n            </table>\n            <div class=\"bg-secondary text-white text-center p-2\">\n                <VisibilityControl description=\"Completed Tasks\"\n                   isChecked={this.state.showCompleted}\n                   callback={(checked) => \n                      this.setState({showCompleted: checked})} />\n            </div>\n            {\n              this.state.showCompleted && \n                <table className=\"table table-striped table-bordered\">\n                   <thead>\n                       <tr><th>Description</th><th>Done</th></tr>\n                   </thead>\n                   <tbody>{this.todoTableRows(true)}</tbody>\n                </table>\n            }\n         </div>\n    </div>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}